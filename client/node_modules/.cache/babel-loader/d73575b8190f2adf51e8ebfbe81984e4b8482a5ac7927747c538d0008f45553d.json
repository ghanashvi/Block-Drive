{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Home/OneDrive/Desktop/Block_Drive/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Users/Home/OneDrive/Desktop/Block_Drive/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/Home/OneDrive/Desktop/Block_Drive/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";import axios from\"axios\";import\"./FileUpload.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FileUpload=function FileUpload(_ref){var contract=_ref.contract,account=_ref.account,provider=_ref.provider;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),file=_useState2[0],setFile=_useState2[1];var _useState3=useState(\"No file selected\"),_useState4=_slicedToArray(_useState3,2),fileName=_useState4[0],setFileName=_useState4[1];var handleSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){var formData,resFile,ImgHash;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:e.preventDefault();if(!file){_context.next=18;break;}_context.prev=2;formData=new FormData();formData.append(\"file\",file);_context.next=7;return axios({method:\"post\",url:\"https://api.pinata.cloud/pinning/pinFileToIPFS\",data:formData,headers:{pinata_api_key:\"aa84684e6730ecc999dd\",pinata_secret_api_key:\"a4421624f43c92cf137567c5b9001248269c1bf891455fa3b8c22eb0999cef66\",\"Content-Type\":\"multipart/form-data\"}});case 7:resFile=_context.sent;ImgHash=\"https://gateway.pinata.cloud/ipfs/\".concat(resFile.data.IpfsHash);contract.add(account,ImgHash);alert(\"Successfully File Uploaded\");setFileName(\"No file selected\");setFile(null);_context.next=18;break;case 15:_context.prev=15;_context.t0=_context[\"catch\"](2);alert(\"Unable to upload file to Pinata\");case 18:alert(\"Successfully File Uploaded\");setFileName(\"No file selected\");setFile(null);case 21:case\"end\":return _context.stop();}},_callee,null,[[2,15]]);}));return function handleSubmit(_x){return _ref2.apply(this,arguments);};}();var retrieveFile=function retrieveFile(e){var data=e.target.files[0];//files array of files object\n// console.log(data);\nvar reader=new window.FileReader();reader.readAsArrayBuffer(data);reader.onloadend=function(){setFile(e.target.files[0]);};setFileName(e.target.files[0].name);e.preventDefault();};return/*#__PURE__*/_jsx(\"div\",{className:\"top\",children:/*#__PURE__*/_jsxs(\"form\",{className:\"form\",onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"file-upload\",className:\"choose\",children:\"Choose File\"}),/*#__PURE__*/_jsx(\"input\",{disabled:!account,type:\"file\",id:\"file-upload\",name:\"data\",onChange:retrieveFile}),/*#__PURE__*/_jsxs(\"span\",{className:\"textArea\",children:[\"Files: \",fileName]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"upload\",disabled:!file,children:\"Upload File\"})]})});};export default FileUpload;// import { useState } from \"react\";\n// import axios from \"axios\";\n// import \"./FileUpload.css\";\n// function FileUpload({ contract, provider, account }) {\n//   // const [urlArr, setUrlArr] = useState([]);\n//   const [file, setFile] = useState(null);\n//   const [fileName, setFileName] = useState(\"No image selected\");\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       if (file) {\n//         try {\n//           const formData = new FormData();\n//           formData.append(\"file\", file);\n//           const resFile = await axios({\n//             method: \"post\",\n//             url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n//             data: formData,\n//             headers: {\n//               pinata_api_key: `95f328a012f1634eab8b`,\n//               pinata_secret_api_key: `8ea64e6b39c91631c66128a7c0e0dde35a6fbdf797a8393cc5ba8bf8d58e9b54`,\n//               \"Content-Type\": \"multipart/form-data\",\n//             },\n//           });\n//           const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\n//           const signer = contract.connect(provider.getSigner());\n//           signer.add(account, ImgHash);\n//           //setUrlArr((prev) => [...prev, ImgHash]);\n//           //Take a look at your Pinata Pinned section, you will see a new file added to you list.\n//         } catch (error) {\n//           alert(\"Error sending File to IPFS\");\n//           console.log(error);\n//         }\n//       }\n//       alert(\"Successfully Uploaded\");\n//       setFileName(\"No image selected\");\n//       setFile(null); //to again disable the upload button after upload\n//     } catch (error) {\n//       console.log(error.message); //this mostly occurse when net is not working\n//     }\n//   };\n//   const retrieveFile = (e) => {\n//     const data = e.target.files[0];\n//     console.log(data);\n//     const reader = new window.FileReader();\n//     reader.readAsArrayBuffer(data);\n//     reader.onloadend = () => {\n//       setFile(e.target.files[0]);\n//     };\n//     setFileName(e.target.files[0].name);\n//     e.preventDefault();\n//   };\n//   return (\n//     <div className=\"top\">\n//       <form className=\"form\" onSubmit={handleSubmit}>\n//         <label htmlFor=\"file-upload\" className=\"choose\">\n//           {/*turn around for avoding choose file */}\n//           Choose Image\n//         </label>\n//         <input\n//           disabled={!account} //disabling button when metamask account is not connected\n//           type=\"file\"\n//           id=\"file-upload\"\n//           name=\"data\"\n//           onChange={retrieveFile}\n//         />\n//         <span className=\"textArea\">Image: {fileName}</span>\n//         {/* choose file */}\n//         <button type=\"submit\" disabled={!file} className=\"upload\">\n//           Upload file\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n// export default FileUpload;","map":{"version":3,"names":["useState","axios","jsx","_jsx","jsxs","_jsxs","FileUpload","_ref","contract","account","provider","_useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","fileName","setFileName","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","formData","resFile","ImgHash","wrap","_callee$","_context","prev","next","preventDefault","FormData","append","method","url","data","headers","pinata_api_key","pinata_secret_api_key","sent","concat","IpfsHash","add","alert","t0","stop","_x","apply","arguments","retrieveFile","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","name","className","children","onSubmit","htmlFor","disabled","type","id","onChange"],"sources":["C:/Users/Home/OneDrive/Desktop/Block_Drive/client/src/components/FileUpload.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./FileUpload.css\";\r\nconst FileUpload = ({ contract, account, provider }) => {\r\n  const [file, setFile] = useState(null);\r\n  const [fileName, setFileName] = useState(\"No file selected\");\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (file) {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        const resFile = await axios({\r\n          method: \"post\",\r\n          url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n          data: formData,\r\n          headers: {\r\n            pinata_api_key: `aa84684e6730ecc999dd`,\r\n            pinata_secret_api_key: `a4421624f43c92cf137567c5b9001248269c1bf891455fa3b8c22eb0999cef66`,\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        });\r\n        const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\r\n        contract.add(account,ImgHash);\r\n        alert(\"Successfully File Uploaded\");\r\n        setFileName(\"No file selected\");\r\n        setFile(null);\r\n      } catch (e) {\r\n        alert(\"Unable to upload file to Pinata\");\r\n      }\r\n    }\r\n    alert(\"Successfully File Uploaded\");\r\n    setFileName(\"No file selected\");\r\n    setFile(null);\r\n  };\r\n  const retrieveFile = (e) => {\r\n    const data = e.target.files[0]; //files array of files object\r\n    // console.log(data);\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(data);\r\n    reader.onloadend = () => {\r\n      setFile(e.target.files[0]);\r\n    };\r\n    setFileName(e.target.files[0].name);\r\n    e.preventDefault();\r\n  };\r\n  return (\r\n    <div className=\"top\">\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"file-upload\" className=\"choose\">\r\n          Choose File\r\n        </label>\r\n        <input\r\n          disabled={!account}\r\n          type=\"file\"\r\n          id=\"file-upload\"\r\n          name=\"data\"\r\n          onChange={retrieveFile}\r\n        />\r\n        <span className=\"textArea\">Files: {fileName}</span>\r\n        <button type=\"submit\" className=\"upload\" disabled={!file}>\r\n          Upload File\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default FileUpload;\r\n\r\n// import { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./FileUpload.css\";\r\n// function FileUpload({ contract, provider, account }) {\r\n//   // const [urlArr, setUrlArr] = useState([]);\r\n//   const [file, setFile] = useState(null);\r\n//   const [fileName, setFileName] = useState(\"No image selected\");\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       if (file) {\r\n//         try {\r\n//           const formData = new FormData();\r\n//           formData.append(\"file\", file);\r\n\r\n//           const resFile = await axios({\r\n//             method: \"post\",\r\n//             url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n//             data: formData,\r\n//             headers: {\r\n//               pinata_api_key: `95f328a012f1634eab8b`,\r\n//               pinata_secret_api_key: `8ea64e6b39c91631c66128a7c0e0dde35a6fbdf797a8393cc5ba8bf8d58e9b54`,\r\n//               \"Content-Type\": \"multipart/form-data\",\r\n//             },\r\n//           });\r\n\r\n//           const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\r\n//           const signer = contract.connect(provider.getSigner());\r\n//           signer.add(account, ImgHash);\r\n\r\n//           //setUrlArr((prev) => [...prev, ImgHash]);\r\n\r\n//           //Take a look at your Pinata Pinned section, you will see a new file added to you list.\r\n//         } catch (error) {\r\n//           alert(\"Error sending File to IPFS\");\r\n//           console.log(error);\r\n//         }\r\n//       }\r\n\r\n//       alert(\"Successfully Uploaded\");\r\n//       setFileName(\"No image selected\");\r\n//       setFile(null); //to again disable the upload button after upload\r\n//     } catch (error) {\r\n//       console.log(error.message); //this mostly occurse when net is not working\r\n//     }\r\n//   };\r\n//   const retrieveFile = (e) => {\r\n//     const data = e.target.files[0];\r\n//     console.log(data);\r\n\r\n//     const reader = new window.FileReader();\r\n\r\n//     reader.readAsArrayBuffer(data);\r\n//     reader.onloadend = () => {\r\n//       setFile(e.target.files[0]);\r\n//     };\r\n//     setFileName(e.target.files[0].name);\r\n//     e.preventDefault();\r\n//   };\r\n//   return (\r\n//     <div className=\"top\">\r\n//       <form className=\"form\" onSubmit={handleSubmit}>\r\n//         <label htmlFor=\"file-upload\" className=\"choose\">\r\n//           {/*turn around for avoding choose file */}\r\n//           Choose Image\r\n//         </label>\r\n//         <input\r\n//           disabled={!account} //disabling button when metamask account is not connected\r\n//           type=\"file\"\r\n//           id=\"file-upload\"\r\n//           name=\"data\"\r\n//           onChange={retrieveFile}\r\n//         />\r\n//         <span className=\"textArea\">Image: {fileName}</span>\r\n//         {/* choose file */}\r\n//         <button type=\"submit\" disabled={!file} className=\"upload\">\r\n//           Upload file\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default FileUpload;\r\n"],"mappings":"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A,UACEgE,QAAQ,CAAE,CAAC1D,OAAQ,CACnB2D,IAAI,CAAC,MAAM,CACXC,EAAE,CAAC,aAAa,CAChBP,IAAI,CAAC,MAAM,CACXQ,QAAQ,CAAEhB,YAAa,CACxB,CAAC,cACFjD,KAAA,SAAM0D,SAAS,CAAC,UAAU,CAAAC,QAAA,EAAC,SAAO,CAAC9C,QAAQ,EAAO,CAAC,cACnDf,IAAA,WAAQiE,IAAI,CAAC,QAAQ,CAACL,SAAS,CAAC,QAAQ,CAACI,QAAQ,CAAE,CAACrD,IAAK,CAAAkD,QAAA,CAAC,aAE1D,CAAQ,CAAC,EACL,CAAC,CACJ,CAAC,CAEV,CAAC,CACD,cAAe,CAAA1D,UAAU,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}